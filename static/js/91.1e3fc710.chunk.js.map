{"version":3,"file":"static/js/91.1e3fc710.chunk.js","mappings":"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","sources":["components/LayoutContact/LayoutContact.styled.js","components/LayoutContact/LayoutContact.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContainerContact = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  padding: 32px;\n  align-items: center;\n  background-color: rgba(236, 243, 245, 0.88);\n  box-shadow: 0px 0px 8px 0px #33333347;\n`;\n","import { ContainerContact } from './LayoutContact.styled.js';\n\nexport function LayoutContact({ children }) {\n  return (\n    <ContainerContact>\n      <main>{children}</main>\n    </ContainerContact>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  padding: 6px;\n  margin-bottom: 10px;\n  font-size: 16px;\n  border: 1px solid teal;\n  border-radius: 4px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  text-align: center;\n  height: 24px;\n  margin-left: auto;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  background-color: rgb(83, 193, 201);\n  box-shadow: rgba(44, 88, 90, 0.95) 1px 1px 3px 1px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  &:hover {\n    background-color: rgba(246, 249, 249, 0.95);\n    transform: scale(1.1);\n    color: black;\n  }\n`;\n","import { Item, Button } from './Contact.styled';\nimport PropTypes from 'prop-types';\n\nexport function Contact({ id, name, number, onDelete }) {\n  return (\n    <Item>\n      {name} : {number}\n      <Button\n        type=\"button\"\n        onClick={() => {\n          onDelete(id);\n        }}\n      >\n        Delete\n      </Button>\n    </Item>\n  );\n}\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 100%;\n  padding: 0px;\n  display: flex;\n  flex-direction: column;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operations';\nimport { Contact } from '../Contact/Contact';\nimport { List } from './ContactList.styled';\nimport { useEffect } from 'react';\n\nexport function ContactList() {\n  let contacts = useSelector(state => state.contacts.items);\n  let isLoading = useSelector(state => state.contacts.isLoading);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const setDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  let contactFilter =\n    contacts.length > 0 &&\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  return (\n    <List>\n      {isLoading ? 'Loading ...' : <br />}\n\n      {contactFilter.length > 0 &&\n        contactFilter.map(({ id, name, number }) => (\n          <Contact\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDelete={setDeleteContact}\n          />\n        ))}\n    </List>\n  );\n}\n","import styled from 'styled-components';\nimport {\n  Field as FormikField,\n  Form as FormikForm,\n  ErrorMessage as FormikError,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 40px 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  background-color: rgba(98, 209, 216, 0.9);\n  border-radius: 10px;\n  box-shadow: rgb(93 92 92) 0px 0px 7px 0px;\n  transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Field = styled(FormikField)`\n  width: 320px;\n  height: 30px;\n  margin-top: 4px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  border: none;\n  box-shadow: rgb(220 220 220) 2px 2px 3px 1px;\n`;\n\nexport const ButtonSubmit = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 32px;\n  padding: 6px 12px;\n  margin: 0 auto;\n  margin-top: 18px;\n  line-height: 1.63;\n  font-size: 14px;\n  font-weight: 600;\n  border: none;\n  border-radius: 4px;\n  color: black;\n  background: rgba(187, 194, 194, 0.95);\n  box-shadow: rgb(220 220 220) 2px 2px 3px 1px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  &:hover {\n    background-color: #d3d3d3;\n    color: #585656;\n    border: none;\n    transform: scale(1.1);\n  }\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  font-weight: 500;\n  color: rgba(185, 0, 6, 0.8);\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  Form,\n  FormField,\n  ButtonSubmit,\n  Field,\n  ErrorMessage,\n} from './ContactForm.styled';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(25, 'Too long!')\n    .required('Required'),\n\n  number: Yup.string().required('Required'),\n});\n\nexport function ContactForm({ onSubmit }) {\n  let contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={(newContact, actions) => {\n        if (\n          contacts.some(\n            item => item.name.toLowerCase() === newContact.name.toLowerCase()\n          )\n        ) {\n          alert(`${newContact.name} is already in contacts`);\n          return;\n        }\n\n        dispatch(addContact(newContact));\n\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormField>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormField>\n        <FormField>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormField>\n        <ButtonSubmit type=\"submit\">Add contact</ButtonSubmit>\n      </Form>\n    </Formik>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  display: flex;\n  justify-content: center;\n  margin: 20px auto;\n  width: 300px;\n  height: 30px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  border: 1px solid rgba(4, 106, 111, 0.95);\n  box-shadow: rgba(132, 132, 132, 0.95) 1px 1px 5px 1px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/filter/slice';\nimport { Input } from './Filter.styled';\n\nexport function Filter() {\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  const setFilter = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <label>\n      <Input\n        type=\"text\"\n        placeholder=\"Find contacts by name\"\n        value={filter}\n        onChange={setFilter}\n      />\n    </label>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { LayoutContact } from 'components/LayoutContact/LayoutContact';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {/* <Helmet>\n        <title>Your contacts</title>\n      </Helmet> */}\n\n      <LayoutContact\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n\n          color: '#010101',\n        }}\n      >\n        {/* <h1>Phonebook</h1> */}\n        <ContactForm />\n        <br />\n        {/* <h2>Contacts</h2> */}\n        <Filter />\n        <ContactList />\n      </LayoutContact>\n    </>\n  );\n}\n"],"names":["ContainerContact","styled","LayoutContact","children","Item","Button","Contact","id","name","number","onDelete","type","onClick","List","ContactList","contacts","useSelector","state","items","isLoading","filter","dispatch","useDispatch","setDeleteContact","contactId","deleteContact","useEffect","fetchContacts","normalizedFilter","toLowerCase","contactFilter","length","contact","includes","map","Form","FormikForm","FormField","Field","FormikField","ButtonSubmit","ErrorMessage","FormikError","ContactSchema","Yup","shape","min","max","required","ContactForm","onSubmit","initialValues","validationSchema","newContact","actions","some","item","alert","addContact","resetForm","placeholder","pattern","title","component","Input","Filter","value","onChange","evt","changeFilter","currentTarget","Contacts","style","display","flexDirection","alignItems","color"],"sourceRoot":""}